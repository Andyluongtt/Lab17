version: 0.2
env:
  privilegedMode: true
  variables:
    AWS_REGION: "ap-southeast-2"
    AWS_APPLICATION_NAME: "Lab17-App"
    AWS_DEPLOYMENT_GROUP_NAME: "Lab17-DeploymentGroup"
    SECURITY_GROUP_IDS: "sg-02b0bccf46eb34243"
    SUBNET_IDS: "subnet-05f594698be3b3d52"
    CLUSTER_NAME: "VPC2-Cluster-Lab17"
    SERVICE_NAME: "Lab17-Service3"
    TASK_NAME_BE: "VPC2-Task-Backend-Lab17-03-withDBinfo-backendLab17-mapportv2:1"
    TASK_FAMILY: "VPC2-Task-Backend-Lab17-03-withDBinfo-backendLab17-mapportv2"
    ECR_IMAGE: "533267067091.dkr.ecr.ap-southeast-2.amazonaws.com/my-repo:latest"
    EXECUTION_ROLE_ARN: "arn:aws:iam::533267067091:role/CodeDeployRole"
    SERVICE_REGISTRY_ARN: "arn:aws:servicediscovery:ap-southeast-2:533267067091:namespace/ns-t2ma76i67zbci6gm"
    TARGET_GROUP_ARN_1: "arn:aws:elasticloadbalancing:ap-southeast-2:533267067091:targetgroup/Targetgroup5000/e231e25a15b4b99f"
    TARGET_GROUP_ARN_2: "arn:aws:elasticloadbalancing:ap-southeast-2:533267067091:targetgroup/Targetgroup5003/536de1813cddcf50"
    CONTAINER_NAME: "backend"
    CONTAINER_PORT_1: "5000"
    CONTAINER_PORT_2: "5002"
phases:
  pre_build:
    commands:
      - export AWS_REGION="ap-southeast-2"
      - export AWS_APPLICATION_NAME="Lab17-App"
      - export AWS_DEPLOYMENT_GROUP_NAME="Lab17-DeploymentGroup"
      # Login to Amazon ECR
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_REGION}.amazonaws.com
      # Set the image tag using CodeBuild source version
      - IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      # Set the full URI for the Docker image
      - IMAGE_URI=${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_IMAGE}:${IMAGE_TAG}
  build:
    commands:
      # Navigate to backend directory and build Docker image
      - cd backend
      - docker build -f Dockerfile -t ${IMAGE_URI} .

  post_build:
    commands:
      # Push the Docker image to ECR
      - docker push ${IMAGE_URI}
      # Get the current task definition from ECS
      - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${TASK_FAMILY} --region ${AWS_REGION})
      # Create new task definition with updated image
      - NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${IMAGE_URI}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)')
      - NEW_REVISION=$(aws ecs register-task-definition --region ${AWS_REGION} --cli-input-json "$NEW_TASK_DEFINITION")
      # Update service with new task definition
      - NEW_TASK_DEF_ARN=$(echo $NEW_REVISION | jq -r '.taskDefinition.taskDefinitionArn')
      - |
        if ! aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --region $AWS_REGION --query 'services[?status==`ACTIVE`]' --output text | grep -q "ACTIVE"; then
          echo "Service does not exist, creating new service..."
          # Create JSON file for load balancers using jq to avoid heredoc issues
          jq -n \
            --arg tg1 "$TARGET_GROUP_ARN_1" \
            --arg tg2 "$TARGET_GROUP_ARN_2" \
            --arg cn "$CONTAINER_NAME" \
            --argjson cp1 "$CONTAINER_PORT_1" \
            --argjson cp2 "$CONTAINER_PORT_2" \
            '[
              {
                "targetGroupArn": $tg1,
                "containerName": $cn,
                "containerPort": $cp1
              },
              {
                "targetGroupArn": $tg2,
                "containerName": $cn,
                "containerPort": $cp2
              }
            ]' > load_balancers.json
          # Validate JSON file
          jq . load_balancers.json || { echo "Invalid JSON in load_balancers.json"; exit 1; }
          # Debug: Log the JSON file
          cat load_balancers.json
          # Create new ECS service
          aws ecs create-service \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --task-definition $TASK_FAMILY \
            --desired-count 1 \
            --launch-type FARGATE \
            --deployment-controller type=CODE_DEPLOY \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUP_IDS],assignPublicIp=DISABLED}" \
            --region $AWS_REGION \
            --load-balancers file://load_balancers.json
          # Wait for service to stabilize
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --region $AWS_REGION
        else
          echo "Service already exists, proceeding with deployment..."
        fi

      - aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN --region $AWS_REGION --force-new-deployment


      # Extract required information for AppSpec
      - AWS_TASK_DEFINITION_ARN=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')
      - CONTAINER_NAME=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.containerDefinitions[0].name')
      - CONTAINER_PORT=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.containerDefinitions[0].portMappings[0].containerPort')

      # Create AppSpec content for CodeDeploy Blue/Green deployment
      - |
        APP_SPEC=$(jq -n --arg taskDef "$AWS_TASK_DEFINITION_ARN" --arg containerName "$CONTAINER_NAME" --argjson containerPort "$CONTAINER_PORT" '{
          version: "0.0",
          Resources: [
            {
              TargetService: {
                Type: "AWS::ECS::Service",
                Properties: {
                  TaskDefinition: $taskDef,
                  LoadBalancerInfo: {
                    ContainerName: $containerName,
                    ContainerPort: $containerPort
                  }
                }
              }
            }
          ]
        }')

      # Create deployment revision with AppSpec content
      - |
        REVISION=$(jq -n --arg appSpec "$APP_SPEC" '{
          revisionType: "AppSpecContent",
          appSpecContent: {
            content: $appSpec
          }
        }')
      - printf '{"ImageURI":"%s"}' $IMAGE_URI > imageDetail.json
      # Create new deployment in CodeDeploy
      - aws deploy create-deployment --region ${AWS_REGION} --application-name ${AWS_APPLICATION_NAME} --deployment-group-name ${AWS_DEPLOYMENT_GROUP_NAME} --revision "$REVISION"

artifacts:
  files:
    - imageDetail.json
