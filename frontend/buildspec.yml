---
version: 0.2
env:
  privilegedMode: true
  variables:
    AWS_REGION: ap-southeast-2
    CLUSTER_NAME: VPC2-Cluster-Lab17
    CI_PROJECT_FE_NAME: frontend-image-lab17
    TASK_NAME_FE: VPC2-Task-Frontend-Lab17-withDBinfo-06:2
phases:
  pre_build:
    commands:
      - echo "Current user: $(whoami)"
      - echo "Groups: $(groups)"
      - if ! getent group docker > /dev/null; then sudo groupadd docker; fi
      - sudo usermod -aG docker $(whoami)
      - newgrp docker
      - sudo rm -f /var/run/docker.sock
      - echo "Starting Docker daemon..."
      - nohup dockerd > /tmp/dockerd.log 2>&1 &
      - timeout 60 sh -c 'until docker info &>/dev/null; do echo "Waiting for
        Docker daemon..."; sleep 2; done'
      - echo "Docker daemon started successfully!"
      - docker info
      - docker ps -a
      - aws ecr get-login-password --region ${AWS_REGION} | docker login
        --username AWS --password-stdin
        ${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - IMAGE_TAG=${CODEBUILD_RESOLVED_SOURCE_VERSION}
      - IMAGE_URI=${AWS_ACCOUNT_NUMBER}.dkr.ecr.${AWS_REGION}.amazonaws.com/${CI_PROJECT_FE_NAME}:${IMAGE_TAG}
  build:
    commands:
      - cd frontend
      - docker build -f Dockerfile.prod -t ${IMAGE_URI} .
  post_build:
    commands:
      - docker push ${IMAGE_URI}
      - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition
        ${TASK_NAME_FE} --region ${AWS_REGION})
      - NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE
        "${IMAGE_URI}" '.taskDefinition | .containerDefinitions[0].image =
        $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) |
        del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) |
        del(.registeredBy)')
      - aws ecs register-task-definition --region ${AWS_REGION} --cli-input-json
        "$NEW_TASK_DEFINITION"
